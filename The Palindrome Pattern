Given a two-dimensional integer array arr of dimensions n x n, consisting solely of zeros and ones, identify the row or column (using 0-based indexing) where all elements form a palindrome. If multiple palindromes are identified, prioritize the palindromes found in rows over those in columns. Within rows or columns, the palindrome with the smaller index takes precedence. The result should be represented by the index followed by either 'R' or 'C', indicating whether the palindrome was located in a row or column. The output should be space-separated. If no palindrome is found, return the string -1.

Examples:

Input: 
arr[][] =  [[1, 0, 0], 
           [0, 1, 0],
           [1, 1, 0]]
Output: 1 R
Explanation: In the first test case, 0-1-0 is a palindrome 
occuring in a row having index 1.


Approach - just iterate through column and rows separately and check the if row or coloumn is palindrome or
not if yes just return also maintain the count for rows and columns.



class Solution {
  public:
  
    bool palindrome(vector<int>& arr){
        int i=0;
        int j=arr.size()-1;
        while(i<=j){
            if(arr[i]!=arr[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
        
    }

    string pattern(vector<vector<int>> &arr) {
        // Code Here
        int countR=0,countC=0;
        string temp="";
        // bool flagR=false, flagC=false;
        for(auto &row:arr){
            if(palindrome(row)){
                // flagR=true;
                temp+=to_string(countR)+' '+'R';
                return temp;
            }
            countR++;
        }
        // for(auto &column:arr){
        //     if(palindrome(column)){
        //         // flagC=true;
        //         temp+=to_string(countC)+' '+'C';
        //         return temp;
        //     }
        //     countC++;
        // }
        int numCols = arr[0].size();
        for (int col = 0; col < numCols; ++col) {
            vector<int> column;
            for (int row = 0; row < arr.size(); ++row) {
                column.push_back(arr[row][col]);
            }
            if (palindrome(column)) {
                temp += to_string(col) + ' ' + 'C';
                return temp;
            }
        }
        return "-1";

    }
};
