Given a binary matrix contains 0s and 1s only, we need to find the sum of coverage of all zeros of the matrix where coverage for a particular 0 is defined as a total number of ones around a zero in left, right, up and bottom directions.

Examples:

Input:
matrix = [[0, 1, 0],
          [0, 1, 1],
          [0, 0, 0]]
Output: 6
Explanation: There are a total of 6 coverage are there

approach - normal loop and checking with if else condition if the element is zero and surrounded by 1 or not . cases are mentioned with comments also.

class Solution {
  public:
    int findCoverage(vector<vector<int>>& matrix) {
        // Code here
        int count=0;
        for(int i=0;i<matrix.size();++i){
            for(int j=0;j<matrix[i].size();++j){
                if(matrix[i][j]==0){
                    //left
                    if(j-1>=0 && matrix[i][j-1]){
                        count++;
                    }
                    //right
                    if(j+1<matrix[i].size() && matrix[i][j+1]){
                        count++;
                    }
                    //up
                    if(i-1>=0 && matrix[i-1][j]){
                        count++;
                    }
                    if(i+1<matrix.size() && matrix[i+1][j]){
                        count++;
                    }
                    
                }
            }
        }
        return count;
    }
};
